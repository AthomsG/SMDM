-pmax(K1-St,0) + 2* pmax(K2-St,0)- pmax(K3-St,0)
}
#using the Black-Scholes model, compute the price of the 1 year European call option
t <- 0
Time <- 1
d1_1
#option 1
d1_1 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K1)+(r+(sigma^2)/2)*(Time-t))
d2_1 <- d1_1 - sigma*sqrt(Time-t)
price_put1 <- pnorm(-d2_1)*K1*exp(-r*(Time-t))-pnorm(-d1_1)*S0
#option 2
d1_2 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K2)+(r+(sigma^2)/2)*(Time-t))
d2_2 <- d1_2 - sigma*sqrt(Time-t)
price_put2 <- pnorm(-d2_2)*K2*exp(-r*(Time-t))-pnorm(-d1_2)*S0
#option 3
d1_3 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K3)+(r+(sigma^2)/2)*(Time-t))
d2_3 <- d1_3 - sigma*sqrt(Time-t)
price_put3 <- pnorm(-d2_3)*K3*exp(-r*(Time-t))-pnorm(-d1_3)*S0
#part a
#delta of portfolio
delta1 <- -pnorm(-d1_1)
delta2 <- -pnorm(-d1_2)
delta3 <- -pnorm(-d1_3)
delta_portfolio <- -delta1 + 2* delta2 - delta3
#gamma of portfolio
gamma1 <- dnorm(d1_1)/(S0 * sigma * sqrt(T-t))
gamma2 <- dnorm(d1_3)/(S0 * sigma * sqrt(T-t))
gamma3 <- dnorm(d1_2)/(S0 * sigma * sqrt(T-t))
gamma_portfolio <- -gamma1 + 2*gamma2 - gamma3
#vega of portfolio
vega1 <- S0 * dnorm (d1_1) * sqrt(T-t)
vega2 <- S0 * dnorm (d1_2) * sqrt(T-t)
vega3 <- S0 * dnorm (d1_3) * sqrt(T-t)
vega_portfolio <- -vega1 + 2*vega2 - vega3
#theta of portfolio
theta1 <- -(S0 * dnorm(d1_1)*sigma)/(2 * sqrt(T-t)) + r*K1 *exp(-r * (T-t))*pnorm(-d2_1)
theta2 <- -(S0 * dnorm(d1_2)*sigma)/(2 * sqrt(T-t)) + r*K2 *exp(-r * (T-t))*pnorm(-d2_2)
theta3 <- -(S0 * dnorm(d1_3)*sigma)/(2 * sqrt(T-t)) + r*K3 *exp(-r * (T-t))*pnorm(-d2_3)
theta_portfolio <- -theta1 +2*theta2 - theta3
#rho of portfolio
rho1 <- -K1 * exp(-r * (T-t)) * pnorm(-d2_1)
rho2 <- -K2 * exp(-r * (T-t)) * pnorm(-d2_2)
rho3 <- -K3 * exp(-r * (T-t)) * pnorm(-d2_3)
rho_portfolio <- -rho1 + 2*rho2 - rho3
delta_portfolio
gamma_portfolio
vega_portfolio
theta_portfolio
rho_portfolio
pi
1/(sqrt(2* pi)*exp(-d1_1)^2/2)
dnorm(d1_1)
#parameters
v <- 1.02604
sigma <- 0.650496
r <- (v + 0.5*sigma^2)
S0 <- 1766.8
K1 <- 1700
K2 <- 2000
K3 <- 2300
St <- seq(0, 2600, 1)
#part a
#making the plot
butterfly <- function(){
-pmax(K1-St,0) + 2* pmax(K2-St,0)- pmax(K3-St,0)
}
plot(butterfly(), xlab = 'Strike price', ylab = 'payoff', type = 'l')
points(K1,0, col = 'red')
points(K2,min(butterfly()), col = 'blue')
points(K3,0, col = 'dark green')
legend(600, -50, legend = c('K1', 'K2', 'K3'), col = c('red', 'blue', 'dark green'), pch = 1)
#put max(k-ST, 0)
#call max (st-k, 0)
#part b
#pricing the butterfly
#using the Black-Scholes model, compute the price of the 1 year European call option
t <- 0
Time <- 1
#option 1
d1_1 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K1)+(r+(sigma^2)/2)*(Time-t))
d2_1 <- d1_1 - sigma*sqrt(Time-t)
price_put1 <- pnorm(-d2_1)*K1*exp(-r*(Time-t))-pnorm(-d1_1)*S0
#option 2
d1_2 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K2)+(r+(sigma^2)/2)*(Time-t))
d2_2 <- d1_2 - sigma*sqrt(Time-t)
price_put2 <- pnorm(-d2_2)*K2*exp(-r*(Time-t))-pnorm(-d1_2)*S0
#option 3
d1_3 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K3)+(r+(sigma^2)/2)*(Time-t))
d2_3 <- d1_3 - sigma*sqrt(Time-t)
price_put3 <- pnorm(-d2_3)*K3*exp(-r*(Time-t))-pnorm(-d1_3)*S0
#black scholes final price
-price_put1 + 2*price_put2 - price_put3
price_put1
price_put2
price_put3
#part c
#in the money probability -> probability that ST < k1 + probability that ST > K3
#prob St < K1
prob_k1 <- pnorm(-d2_1)
#prob ST > K2
prob_k3 <- pnorm(d2_3)
#in the money
probability <- prob_k1 + prob_k3
prob_k1
prob_k3
probability
#hier heb ik het dus via andere manier berekend, maar komt het niet uit... Kijk ff of je mee eens bent dat ik dit hierboven als final answer heb gepakt. Dan kan je dit hier gewoon verwijderen
#via the binomial lattice tree pricing model
#using the binomial model to compute the price of the 1 year European call option
#first computing u, d en p
time <- 1/365
u <- exp(sigma*sqrt(time))
d <- exp(-sigma*sqrt(time))
p <- 0.5 + 0.5*(v/sigma)*sqrt(time)
#get the endinvestment final numbers
endinvestment2 <- rep(0,1)
NrPeriods <- 12
for (i in 0:NrPeriods+1){
endinvestment2[i] <- S0* u^(i-1) * d^(NrPeriods+1-i)
}
#get the other 2 parameters for the function
R <- 1+ r*time
q <- (R-d)/(u-d)
#formula for computations of option prices via backwards recursion
price <- function(Cup, Cdown){
(q*Cup + (1-q)*Cdown)/R
}
#minus the strickeprice to get the margin. If it is below 0 it becomes 0
payoff1 <- K1 - endinvestment2
payoff1[payoff1<0] <- 0
payoff2 <- K2 - endinvestment2
payoff2[payoff2<0] <- 0
payoff3 <- K3 - endinvestment2
payoff3[payoff3<0] <- 0
#makes the first line of the matrix the end payoff
payoffmatrix1 <- matrix(nrow = length(payoff1), ncol = length(payoff1))
payoffmatrix1[1,] <- payoff1
#makes the first line of the matrix the end payoff
payoffmatrix2 <- matrix(nrow = length(payoff2), ncol = length(payoff2))
payoffmatrix2[1,] <- payoff2
#makes the first line of the matrix the end payoff
payoffmatrix3 <- matrix(nrow = length(payoff3), ncol = length(payoff3))
payoffmatrix3[1,] <- payoff3
#using the formula of option pricing via backwards recursion
#every time a step back, gets a matrix with at the end the price
for (j in 1:length(payoff1)){
for(i in 1:length(payoff1)-1){
payoffmatrix1[j+1,i] <- price(payoffmatrix1[j,i+1], payoffmatrix1[j,i])
}
}
put1 <- payoffmatrix1[NrPeriods+1,1]
for (j in 1:length(payoff2)){
for(i in 1:length(payoff2)-1){
payoffmatrix2[j+1,i] <- price(payoffmatrix2[j,i+1], payoffmatrix2[j,i])
}
}
put2 <- payoffmatrix2[NrPeriods+1,1]
for (j in 1:length(payoff3)){
for(i in 1:length(payoff3)-1){
payoffmatrix3[j+1,i] <- price(payoffmatrix3[j,i+1], payoffmatrix3[j,i])
}
}
put3 <- payoffmatrix3[NrPeriods+1,1]
#total price
put1 - 2*put2 + put3
#they can also be computed by another way
#one period binomial
mu <- v + 1/2 * sigma^2
u1 <- (mu^2 + sqrt(mu^4+4*mu^3+4*mu^2+4*sigma^4)+ 2*mu +2)/(2*(mu-sigma^2+1))
d1 <- u1^-1
p1 <- (mu*u1 + u1 -1)/(u1^2 -1)
#get the endinvestment final numbers
endinvestment_new <- c(S0 *d1,S0 *u1)
#minus the strickeprice to get the margin. If it is below 0 it becomes 0
payoff1_new <- K1 - endinvestment_new
payoff1_new[payoff1_new<0] <- 0
payoff2_new <- K2 - endinvestment_new
payoff2_new[payoff2_new<0] <- 0
payoff3_new <- K3 - endinvestment_new
payoff3_new[payoff3_new<0] <- 0
put1_new <- price(payoff1_new[2], payoff1_new[1])
put2_new <- price(payoff2_new[2], payoff2_new[1])
put3_new <- price(payoff3_new[2], payoff3_new[1])
#totalprice
put1_new - 2*put2_new + put3_new
#parameters
v <- 1.02604
sigma <- 0.650496
r <- (v + 0.5*sigma^2)
S0 <- 1766.8
K1 <- 1700
K2 <- 2000
K3 <- 2300
St <- seq(0, 2600, 1)
butterfly <- function(){
-pmax(K1-St,0) + 2* pmax(K2-St,0)- pmax(K3-St,0)
}
#using the Black-Scholes model, compute the price of the 1 year European call option
t <- 0
Time <- 1
d1_1
#option 1
d1_1 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K1)+(r+(sigma^2)/2)*(Time-t))
d2_1 <- d1_1 - sigma*sqrt(Time-t)
price_put1 <- pnorm(-d2_1)*K1*exp(-r*(Time-t))-pnorm(-d1_1)*S0
#option 2
d1_2 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K2)+(r+(sigma^2)/2)*(Time-t))
d2_2 <- d1_2 - sigma*sqrt(Time-t)
price_put2 <- pnorm(-d2_2)*K2*exp(-r*(Time-t))-pnorm(-d1_2)*S0
#option 3
d1_3 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K3)+(r+(sigma^2)/2)*(Time-t))
d2_3 <- d1_3 - sigma*sqrt(Time-t)
price_put3 <- pnorm(-d2_3)*K3*exp(-r*(Time-t))-pnorm(-d1_3)*S0
#part a
#delta of portfolio
delta1 <- -pnorm(-d1_1)
delta2 <- -pnorm(-d1_2)
delta3 <- -pnorm(-d1_3)
delta_portfolio <- -delta1 + 2* delta2 - delta3
#gamma of portfolio
gamma1 <- dnorm(d1_1)/(S0 * sigma * sqrt(T-t))
gamma2 <- dnorm(d1_3)/(S0 * sigma * sqrt(T-t))
gamma3 <- dnorm(d1_2)/(S0 * sigma * sqrt(T-t))
gamma_portfolio <- -gamma1 + 2*gamma2 - gamma3
#vega of portfolio
vega1 <- S0 * dnorm (d1_1) * sqrt(T-t)
vega2 <- S0 * dnorm (d1_2) * sqrt(T-t)
vega3 <- S0 * dnorm (d1_3) * sqrt(T-t)
vega_portfolio <- -vega1 + 2*vega2 - vega3
1/(sqrt(2* pi)*exp(-d1_1)^2/2)
dnorm(d1_1)
#theta of portfolio
theta1 <- -(S0 * dnorm(d1_1)*sigma)/(2 * sqrt(T-t)) + r*K1 *exp(-r * (T-t))*pnorm(-d2_1)
theta2 <- -(S0 * dnorm(d1_2)*sigma)/(2 * sqrt(T-t)) + r*K2 *exp(-r * (T-t))*pnorm(-d2_2)
theta3 <- -(S0 * dnorm(d1_3)*sigma)/(2 * sqrt(T-t)) + r*K3 *exp(-r * (T-t))*pnorm(-d2_3)
theta_portfolio <- -theta1 +2*theta2 - theta3
#rho of portfolio
rho1 <- -K1 * exp(-r * (T-t)) * pnorm(-d2_1)
rho2 <- -K2 * exp(-r * (T-t)) * pnorm(-d2_2)
rho3 <- -K3 * exp(-r * (T-t)) * pnorm(-d2_3)
rho_portfolio <- -rho1 + 2*rho2 - rho3
delta_portfolio
gamma_portfolio
vega_portfolio
theta_portfolio
rho_portfolio
#part b
t2 <- seq(0,1, 1/12)
St <- c(S0, 2131.77, 2572.13,3103.46, 3744.54,4518.05, 5451.34,6577.43, 7936.13,6577.43, 5451.34,4518.05, 3744.54)
data.frame(t2,St)
#parameters
v <- 1.02604
sigma <- 0.650496
r <- (v + 0.5*sigma^2)
S0 <- 1766.8
K1 <- 1700
K2 <- 2000
K3 <- 2300
St <- seq(0, 2600, 1)
butterfly <- function(){
-pmax(K1-St,0) + 2* pmax(K2-St,0)- pmax(K3-St,0)
}
#using the Black-Scholes model, compute the price of the 1 year European call option
t <- 0
Time <- 1
d1_1
#option 1
d1_1 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K1)+(r+(sigma^2)/2)*(Time-t))
d2_1 <- d1_1 - sigma*sqrt(Time-t)
price_put1 <- pnorm(-d2_1)*K1*exp(-r*(Time-t))-pnorm(-d1_1)*S0
#option 2
d1_2 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K2)+(r+(sigma^2)/2)*(Time-t))
d2_2 <- d1_2 - sigma*sqrt(Time-t)
price_put2 <- pnorm(-d2_2)*K2*exp(-r*(Time-t))-pnorm(-d1_2)*S0
#option 3
d1_3 <- (1/(sigma*sqrt(Time-t)))*(log(S0/K3)+(r+(sigma^2)/2)*(Time-t))
d2_3 <- d1_3 - sigma*sqrt(Time-t)
price_put3 <- pnorm(-d2_3)*K3*exp(-r*(Time-t))-pnorm(-d1_3)*S0
#part a
#delta of portfolio
delta1 <- -pnorm(-d1_1)
delta2 <- -pnorm(-d1_2)
delta3 <- -pnorm(-d1_3)
delta_portfolio <- -delta1 + 2* delta2 - delta3
#gamma of portfolio
gamma1 <- dnorm(d1_1)/(S0 * sigma * sqrt(T-t))
gamma2 <- dnorm(d1_3)/(S0 * sigma * sqrt(T-t))
gamma3 <- dnorm(d1_2)/(S0 * sigma * sqrt(T-t))
gamma_portfolio <- -gamma1 + 2*gamma2 - gamma3
#vega of portfolio
vega1 <- S0 * dnorm (d1_1) * sqrt(T-t)
vega2 <- S0 * dnorm (d1_2) * sqrt(T-t)
vega3 <- S0 * dnorm (d1_3) * sqrt(T-t)
vega_portfolio <- -vega1 + 2*vega2 - vega3
1/(sqrt(2* pi)*exp(-d1_1)^2/2)
dnorm(d1_1)
#theta of portfolio
theta1 <- -(S0 * dnorm(d1_1)*sigma)/(2 * sqrt(T-t)) + r*K1 *exp(-r * (T-t))*pnorm(-d2_1)
theta2 <- -(S0 * dnorm(d1_2)*sigma)/(2 * sqrt(T-t)) + r*K2 *exp(-r * (T-t))*pnorm(-d2_2)
theta3 <- -(S0 * dnorm(d1_3)*sigma)/(2 * sqrt(T-t)) + r*K3 *exp(-r * (T-t))*pnorm(-d2_3)
theta_portfolio <- -theta1 +2*theta2 - theta3
#rho of portfolio
rho1 <- -K1 * exp(-r * (T-t)) * pnorm(-d2_1)
rho2 <- -K2 * exp(-r * (T-t)) * pnorm(-d2_2)
rho3 <- -K3 * exp(-r * (T-t)) * pnorm(-d2_3)
rho_portfolio <- -rho1 + 2*rho2 - rho3
delta_portfolio
gamma_portfolio
vega_portfolio
theta_portfolio
rho_portfolio
#part b
t2 <- seq(0,1, 1/12)
St <- c(S0, 2131.77, 2572.13,3103.46, 3744.54,4518.05, 5451.34,6577.43, 7936.13,6577.43, 5451.34,4518.05, 3744.54)
data.frame(t2,St)
library(readxl)
Production <- read_excel("C:/Users/20182102/OneDrive - TU Eindhoven/Universiteit/2020-2021/BEP/Production.xlsx")
View(Production)
Table(Production)
table(Production)
table(Production[4])
Production[4]
plot(table(Production[4]))
sort(table(Production[4]))
plot(sort(table(Production[4])))
plot(sort(table(Production[3])))
sort(table(Production[3]))
sort(table(Production[3]))
load("C:/Users/20182102/Downloads/BenAndJerry.RData")
Unit.price <- c(BenAndJerry$price_paid_deal + BenAndJerry$price_paid_non_deal)
BenAndJerry$Unit.price <- Unit.price
View(BenAndJerry)
?tapply
aggregate(BenAndJerry[, 'Unit.price'], list(BenAndJerry$flavor_descr ), mean)
?aggregate
aggregate(unit.price ~ flavor_descr, FUN = mean, data = BenAndJerry)
aggregate(Unit.price ~ flavor_descr, FUN = mean, data = BenAndJerry)
tab_flavours <- aggregate(Unit.price ~ flavor_descr, FUN = mean, data = BenAndJerry)
?subset
subset(BenAndJerry, price_paid_non_deal > 0, select = c(price_paid_non_deal, flavor_descr))
subset(BenAndJerry, price_paid_deal > 0, select = c(price_paid_deal, flavor_descr))
subset(BenAndJerry, price_paid_non_deal > 0, select = c(flavor_descr, price_paid_non_deal ))
subset(BenAndJerry, price_paid_deal > 0, select = c(flavor_descr, price_paid_deal))
non_deals <- subset(BenAndJerry, price_paid_non_deal > 0, select = c(flavor_descr, price_paid_non_deal ))
deals <- subset(BenAndJerry, price_paid_deal > 0, select = c(flavor_descr, price_paid_deal))
View(non_deals)
View(non_deals)
tab_promo <- aggregate(price_paid_deal ~ flavor_descr, FUN = mean, data = deals)
tab_promo
tab_promo <- aggregate(price_paid_deal ~ flavor_descr, FUN = mean, data = deals)
tab_nopromo <- aggregate(price_paid_non_deal ~ flavor_descr, FUN = mean, data = non_deals)
tab_promo[2] - tab_nopromo[2]
tab_promo[,2] - tab_nopromo[,2]
tab_promo
tab_promo[,2]
tab_promo$nopromo <- tab_nopromo[,2]
tab_promo
tab_nopromo
x<- rep(0,50)
for(i in 1: 50){
if (tab_promo[i,1]== tab_nopromo[i,1]){
x[i] <- tab_nopromo[i, 2] - tab_nopromo}
else {
x[i] <- tab_nopromo[i]
}
}
x<- rep(0,50)
for(i in 1: 50){
if (tab_promo[i,1]== tab_nopromo[i,1]){
x[i] <- tab_nopromo[i, 2] - tab_nopromo[i,2]}
else {
x[i] <- tab_nopromo[i]
}
}
x<- rep(0,50)
for(i in 1: 50){
if (tab_promo[i,1]== tab_nopromo[i,1]){
x[i] <- tab_nopromo[i, 2] - tab_nopromo[i,2]}
else {
x[i] <- tab_nopromo[i,2]
}
}
for(i in 1: 50){
if (tab_promo[i,1]== tab_nopromo[i,1]){
x[i] <- tab_nopromo[i, 2] - tab_nopromo[i,2]}
else {
x[i] <- tab_nopromo[i,2]
}
}
View(deals)
View(non_deals)
View(tab_nopromo)
View(tab_promo)
tab_flavours
aggregate(price_paid_deal ~ flavor_descr, FUN = mean, data = BenAndJerry)
aggregate(price_paid_deal ~ flavor_descr, data = BenAndJerry)
subset(BenAndJerry, price_paid_non_deal +> 0, select = c(flavor_descr, price_paid_non_deal ))
subset(BenAndJerry, price_paid_non_deal => 0, select = c(flavor_descr, price_paid_non_deal ))
subset(BenAndJerry, price_paid_non_deal >= 0, select = c(flavor_descr, price_paid_non_deal ))
aggregate(price_paid_deal ~ flavor_descr, FUN = sum, data = subset(BenAndJerry, price_paid_non_deal >= 0, select = c(flavor_descr, price_paid_non_deal )))
aggregate(price_paid_non_deal ~ flavor_descr, FUN = sum, data = subset(BenAndJerry, price_paid_non_deal >= 0, select = c(flavor_descr, price_paid_non_deal )))
non_deals2<-  subset(BenAndJerry, price_paid_non_deal >= 0, select = c(flavor_descr, price_paid_non_deal ))
non_check <- aggregate(price_paid_non_deal ~ flavor_descr, FUN =sum, data = non_deals2)
non_check
aggregate(price_paid_non_deal ~ flavor_descr, FUN =count, data = non_deals2)
tab_promo
tab_nopromo
table(BenAndJerry)
table(BenAndJerry$flavor_descr)
tab_freq = table(BenAndJerry$flavor_descr)
library(dplyr)
library(dplyr)
library(dplyr)
BenAndJerry%>%group_by(flavor_descr, male_head_birth, female_head_birth)%>%count()
library(tidyverse)
BenAndJerry%>%group_by(flavor_descr, male_head_birth, female_head_birth)%>%count()
library(tidyverse)
BenAndJerry%>%
group_by(flavor_descr, male_head_birth, female_head_birth)%>%count()
BenAndJerry%>%
group_by(flavor_descr, male_head_birth, female_head_birth)%>%
x<- rep(0,50)
library(tidyverse)
BenAndJerry%>%
group_by(flavor_descr, male_head_birth, female_head_birth)%>%
x<- rep(0,50)
BenAndJerry%>%
group_by(flavor_descr, male_head_birth)%>%
x<- rep(0,50)
library(tidyverse)
aggregate(Unit.price ~ flavor_descr, FUN = mean, subset = is.na(promotion_type), data = BenAndJerry)
tab_nopromo
load("C:/Users/20182102/Downloads/LightBeer.RData")
View(LightBeer)
aggregate(Unit.price ~ beer_brand + container_description, FUN=mean, data = LightBeer)
aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == FALSE FUN=mean, data = LightBeer)
aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == FALSE, FUN=mean, data = LightBeer)
aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == 'FALSE', FUN=mean, data = LightBeer)
Unit.price <- (LightBeer$beer_spend1.11)/((LightBeer$beer_floz29.57353)*0.001)
aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == 'FALSE', FUN=mean, data = LightBeer)
Unit.price <- (LightBeer$beer_spend1.11)/((LightBeer$beer_floz*29.57353)*0.001)
aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == 'FALSE', FUN=mean, data = LightBeer)
Unit.price <- (LightBeer$beer_spend*1.11)/((LightBeer$beer_floz*29.57353)*0.001)
aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == 'FALSE', FUN=mean, data = LightBeer)
round(5.3213123, digits = 2)
averagebeerprice <- aggregate(Unit.price ~ beer_brand + container_descr, subset = promotion == 'FALSE', FUN=mean, data = LightBeer)
print.data.frame(averagebeerprice, digits = 3)
print.data.frame(averagebeerprice, digits = 2)
LightBeer$Unit.price <- Unit.price
LightBeer$beer_brand[beer_brand == 'Miller lite']
LightBeer[LightBeer$beer_brand, 'Miller lite']
LightBeer[LightBeer$beer_brand, 'MILLER LITE']
gc()
x + 6
x <- 7
x + 6
u <- 1.5
d <- 0.5
w1 <- 6
w2 <- 15
u <- 1.5
d <- 0.5
w1 <- 6
w2 <- 15
q <- function(r){
print(1 + r - d)
}
q(2)
r.version()
R.version()
R.version
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
# # Real/numerical 2, 35, 36, 37, 38, 84, 86, 87, 88, 89. 90, 91  normalizen, anders te veel effect
#
#Steps in order to fix the dataset
#Load Dataset
# data<-read.csv("datasets/MI.data")
data <- read.table('datasets/MI.data', sep = ',')
setwd("~/Github/SMDM")
data <- readRDS("datasets/preprocessed.RDS")
View(data)
install.packages(c("cluster", "factoextra","fpc"))
install.packages(c("cluster", "factoextra", "fpc"))
data <- readRDS("datasets/preprocessed.RDS")
library(cluster)
library(factoextra)
data <- readRDS("datasets/preprocessed.RDS")
y <- data$V122
data <- readRDS("datasets/preprocessed.RDS")
y <- data$V122
data <- data$V122
data <- readRDS("datasets/preprocessed.RDS")
y <- data$V122
data$V122 <- NULL
mycluster <- function(x, k) list(cluster=cutree(hclust(dist(x), method = "average"),k=k))
gap_stat <- clusGap(data, FUN = mycluster, K.max = 10, B = 500)
mycluster <- function(x, k) list(cluster=cutree(hclust(dist(x), method = "average"),k=k))
gap_stat <- clusGap(data, FUN = mycluster, K.max = 3, B = 500)
fviz_gap_stat(gap_stat) # "firstSEmax"
h.out<-hclust(dist(data))
plot(h.out, cex=0.6)
rect.hclust(h.out, k = 2, border = 2:5)
sub_grp <- cutree(h.out, k = 2)
fviz_cluster(list(data = df, cluster = sub_grp), ellipse.type = "norm")
fviz_cluster(list(data = data, cluster = sub_grp), ellipse.type = "norm")
y
gap_stat
h.out
plot(h.out, cex=0.6)
