table(substring(N, 9, 12))
#2021
FH <- NPF_2021$...11[substring(NPF_2021$...11, 1, 2) == "FH"]
NB <- NPF_2021$...11[substring(NPF_2021$...11, 1, 2) == "NB"]
N <- NPF_2021$...11[substring(NPF_2021$...11, 1, 2) != "FH"]
table(substring(N, 9, 12))
table(substring(FH, 10, 13))
table(substring(NB, 10, 13))
table(NPF_2$Datum.Artikel.op.locatie < 20210420)
table(NPF_2$Datum.Artikel.op.locatie < 20210420)
#more than 1 week
table(NPF_2$Datum.Artikel.op.locatie < 20210412)
#season
table(NPF_2$Seizoen)
table(substring(N, 9, 12))
table(substring(FH, 10, 13))
table(substring(NB, 10, 13))
#season
table(NPF$Seizoen)
length(NPF$Seizoen)
NPF
length(NPF$Locatie)
length(unique(NPF$Locatie))
#number of items on each location
table(NPF_2$Aantal.vrije.voorraad)
#number of duplicates
sum(duplicated(NPF_2$Artikel.barcode))
#number of items on location
table(NPF_2$Aantal.vrije.voorraad)
sum(table(NPF_2$Aantal.vrije.voorraad))
table(NPF$Locatie)
NPF$Locatie
NPF$Locatie > 162
sum(NPF$Locatie > 162)
sum(NPF$Locatie > 162A)
sum(NPF$Locatie > 163)
sum(NPF$Locatie > 164)
NPF_2$Locatie
NPF_2$Locatie > 163
sum(NPF_2$Locatie > 163)
sum(NPF_2$Locatie > 164)
sum(NPF_2$Locatie > 164)
sum(NPF$Locatie > 164)
table(NPF_2$Omschr..1)
#season
table(NPF_2$Seizoen)
#hanging locations
sum(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164)
#lying locations
sum(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie < 164)
#return locations: Items longer than 4 weeks
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]
#hanging locations
sum(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164)
#lying locations
sum(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie < 164)
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#lying locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie < 164)
#season
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Seizoen)
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164)
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164]
NPF[[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164]
NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie > 164,  ]
#hanging
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie > 164,])
#hanging
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie > 164,]$Seizoen)
#lying
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie < 164,]$Seizoen)
#hanging
table(NPF_2[NPF$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
#hanging
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
#lying
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie < 164,]$Seizoen)
#lying
sum(table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie < 164,]$Seizoen))
#hanging
sum(table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen))
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
length(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
#hanging
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad)
length(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad)
NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164
sum(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164)
#return locations: Items longer than 4 weeks
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]
NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie
length(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Locatie)
sum(NPF[NPF$Datum.Artikel.op.locatie < 20210210,]$Aantal.vrije.voorraad)
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#season
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Seizoen)
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#season
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Seizoen)
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#hanging
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Seizoen)
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad)
length(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad)
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad)
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]
length(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Locatie)
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#hanging locations
length(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#hanging locations
length(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164
#hanging locations
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210 & NPF_2$Locatie > 164,]$Locatie
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210,]$Locatie
NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164)
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210210,]$Locatie > 164)
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie > 164,]$Aantal.vrije.voorraad)
sum(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329,]$Locatie > 164)
#hanging
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie > 164,]$Seizoen)
#lying
sum(table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie < 164,]$Seizoen))
#lying
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie < 164,]$Seizoen)
#lying
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie < 164,]$Seizoen)
#hanging
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie > 164,]$Seizoen)
#lying
table(NPF[NPF$Datum.Artikel.op.locatie < 20210210 & NPF$Locatie < 164,]$Seizoen)
#hanging
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie > 164,]$Seizoen)
#lying
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie < 164,]$Seizoen)
#more than 4 weeks
table(NPF_2$Datum.Artikel.op.locatie < 20210329)
NPF
NPF_2020_B2C
NPF_2021_B2C
View(NPF_2020_B2C)
NPF_2020_B2C$...19
NPF_2021_B2C$...19
library(fitdistrplus)
install.packages("C:/Users/20182081/Downloads/fitdistrplus_1.1-3.tar.gz", repos = NULL, type = "source")
library(fitdistrplus)
fitdist(NPF_2020_B2C, "lnorm","mle")
fitdist(NPF_2020_B2C$...19, "lnorm","mle")
NPF_2020_B2C$...19
NPF_2020_B2C$...19
unlist(NPF_2020_B2C$...19)
unlist(NPF_2020_B2C$...19)[-2]
unlist(NPF_2020_B2C$...19)[-1]
unlist(NPF_2020_B2C$...19)[-3]
as.numeric(NPF_2020_B2C$...19)
Return_period <- as.numeric(NPF_2020_B2C$...19)
Return_period[!is.na(Return_period)]
Return_period
Return_period[!is.na(Return_period)]
PERIOD <- Return_period[!is.na(Return_period)]
fitdist(PERIOD, "lnorm", "mle")
Lnorm <- fitdist(PERIOD, "lnorm", "mle")
plot(Lnorm)
unlist(NPF_2020_B2C$...19
plot(Lnorm)
summary(Lnorm)
summary(Lnorm)
Lnorm <- fitdist(PERIOD, "lnorm", method = "mle")
plot(Lnorm)
Lnorm <- fitdist(PERIOD, "gamma", method = "mle")
plot(Lnorm)
Lnorm <- fitdist(PERIOD, "pois", method = "mle")
plot(Lnorm)
Lnorm <- fitdist(PERIOD, "norm", method = "mle")
plot(Lnorm)
plot(PERIOD)
PERIOD <- Return_period[!is.na(Return_period)]
PERIOD
plot(PERIOD)
hist(PERIOD)
hist(PERIOD, breaks = 100)
hist(PERIOD, breaks = 1000)
hist(PERIOD, breaks = 1000, xlim = c(0, 50))
hist(PERIOD, breaks = 100, xlim = c(0, 50))
hist(PERIOD, breaks = 10000 xlim = c(0, 50))
hist(PERIOD, breaks = 1000, xlim = c(0,50))
plot(Lnorm)
PERIOD
max(PERIOD)
sort(PERIOD, decreasing = TRUE)
hist(Test, xlim = c(0,60), breaks = 500, main = "Distribution of return period")
table(Test_V2)
hist(Test_V2)
hist(Test_V2, xlim = c(0,60), breaks = 500, main = "Distribution of return period")
fitdist(Test_V2, "exp", method = "mge")
fitdist(Test_V2, "exp", method = "mle")
plot(fitdist(Test_V2, "exp", method = "mle"))
summary(Test_V2)
fitdist(PERIOD, "weibull")
plot(fitdist(PERIOD, "weibull"))
hist(PERIOD)
hist(PERIOD, xlim=(0. 60))
hist(PERIOD, xlim=(0, 60))
hist(PERIOD, xlim=(0, 60))
hist(PERIOD, xlim=c(0,60))
hist(PERIOD, xlim=c(0,60), breaks = 500)
line(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 14.474804))
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 14.474804))
hist(PERIOD, xlim=c(0,60), breaks = 500, freq = FALSE)
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 14.474804))
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 17))
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 10))
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 8))
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 9))
hist(PERIOD, xlim=c(0,60), breaks = 500, freq = FALSE)
lines(dweibull(seq(0, 60, 1), shape = 1.608633, scale = 9))
lines(dweibull(seq(0, 60, 1), shape = 2, scale = 9))
lines(dweibull(seq(0, 60, 1), shape = 2, scale = 8))
lines(dweibull(seq(0, 60, 1), shape = 2, scale = 10))
hist(PERIOD, xlim=c(0,60), breaks = 500, freq = FALSE)
lines(dweibull(seq(0, 60, 1), shape = 2, scale = 10))
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1, shape = 2, scale = 10)
rweibull(1000000, shape = 2, scale = 10)
mean(rweibull(1000000, shape = 2, scale = 10))
mean(rweibull(1000000, shape = 2, scale = 10))
mean(rweibull(1000000, shape = 2, scale = 10))
mean(rweibull(1000000, shape = 2, scale = 10))
mean(PERIOD)
mean(rweibull(1000000, shape = 1.608633, scale = 14.474804))
mean(PERIOD)
plot(fitdist(PERIOD, "binom"))
plot(fitdist(PERIOD, "gamma"))
hist(PERIOD, breaks = 1000, xlim = c(0,50))
hist(PERIOD, xlim=c(0,60), breaks = 500, freq = FALSE)
plot(fitdist(PERIOD, "weibull"))
#all items:
table(NPF$Seizoen)
table(NPF_2$Seizoen)
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie < 164, ]$Seizoen)
#lying
table(NPF_2[NPF_2$Datum.Artikel.op.locatie < 20210329 & NPF_2$Locatie < 164,]$Seizoen)
table(NPF_2[NPF_2$Locatie < 164,]$Seizoen)
table(NPF_2[NPF_2$Locatie < 164,]$Seizoen)
table(NPF_2[NPF_2$Locatie < 164, ]$Seizoen)
table(NPF_2[NPF_2$Locatie < 164,]$Seizoen)
#all items:
table(NPF$Seizoen)
#lying
table(NPF_2[NPF_2$Locatie < 164,]$Seizoen)
#lying
table(NPF_2[NPF_2$Locatie < 164,]$Seizoen)
table(NPF[NPF$Locatie < 164, ]$Seizoen)
table(NPF_2[NPF_2$Locatie > 164,]$Seizoen)
table(NPF[NPF$Locatie > 164, ]$Seizoen)
table(NPF_2[NPF_2$Locatie > 164,]$Seizoen)
table(NPF[NPF$Locatie > 164, ]$Seizoen)
hoi
data.frame(Data)
Data <- read.csv("C:/Users/20182081/OneDrive - TU Eindhoven/2022-2023/IST_Lisboa/Courses/SMDM/Project/MI.data", header=FALSE)
View(Data)
View(Data)
1+1
2+1
1+1
2+1
2+1
1+1
2+1
c(1,2,3)*10
x <- 5
x*x
exp(1)
x+3
lx<-c(15:1, 3:11, 7*2, 8) # creates a vector
length(lx)
lx
m<-matrix(lx,13,2,byrow=TRUE)
m
log(lx)
log(lx,10)
sqrt(lx)
m%*%lx[1:2]
lx[1:2]
m%*%t(m)
library(rio)
install.packages("rio")
urlmy<-"https://web.tecnico.ulisboa.pt/~ist13493/AM2023/Lab1/pardais.xlsx"
pardais<-import(urlmy)
pardais <- import(urlmy)
import(urlmy)
pardais<-import("pardais.xlsx")
import("pardais.xlsx")
library(readxl)
pardais <- read_excel(NULL)
View(pardais)
library(readxl)
pardais <- read_excel("C:/Users/20182081/OneDrive - TU Eindhoven/2022-2023/IST_Lisboa/Courses/SMDM/Project/pardais.xlsx")
pardais
summary(pardais)
View(pardais)
View(pardais)
R.version
setwd("~/GitHub/SMDM")
#Import libraries
library(ggplot2)
(cowplot)
library(cowplot)
data <- read.table('datasets/MI.data', sep = ',')
data[]<-lapply(data, function(x) as.numeric(as.character(x))) #Force all datatypes to be numeric
y <- data[c(122)]#Output
#Remove variables that are useless
data <- data[-c(1, 95, 102, 105, 112:121, 123, 124)]
#Remove variables that have more than 25% missing values
data<-data[, which(colMeans(!is.na(data)) > 0.25)]
#Fix NaN values: Real variables: Mean, Binary variables: Mode
getmode <- function(v) { #Function for the mode
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
data_na <- data
for(i in 1:ncol(data)) {
if (is.na(getmode (data_na[ , i]))){ #If mode is NA, most likely that it is real value, mean is okay
data_na[ , i][is.na(data_na[ , i])] <- mean(data_na[ , i], na.rm = TRUE)
}
else{ #Take for the ordinal and binary
data_na[ , i][is.na(data_na[ , i])] <- getmode(data_na[ , i])
}
}
#Normalization/standardization of real values
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
data_norm <- as.data.frame(lapply(data_na, min_max_norm))
#Split the data set in two seperate dataframes based on Binary vs real/ordinal
binary_data <- Filter(function(x) all(x %in% c(0, 1)), data_norm)
real_data <- data.frame(data_norm[, -which(names(data_norm) %in% names(binary_data))])
#Remove variables with correlation matrix (real variables and ordinal data)
#Remove variables with Chi-Squared test (Binary variables)
#Code for chi-squared correlations between dependent variable and the independent variables
#H0: The two variables are independent.
#H1: The two variables relate to each other.
x <- 1:length(binary_data)
result <- vector('list', length(x))
for(i in x){
test <- chisq.test(binary_data[,colnames(binary_data[i])], y$V122)
result[[i]] <- data.frame("X" = colnames(binary_data[i]),
"Y" = colnames(y),
"Chi.Square" = round(test$statistic,3),
"df"= test$parameter,
"p.value" = round(test$p.value, 3))
}
#print(result) # to see the p values
#p values < 0.05: reject Null hypothesis : the selected variables are dependent, so can be used to predict the dependent variable
#Feature selection: Selection variables that can be removed
x <- 1:length(binary_data)
Remove_vars <- c(rep(0,length(binary_data)))
for(i in x){
if(result[[i]][[5]]> 0.05){
Remove_vars[i] <- result[[i]][[1]]
}
}
#Remove binary variables that have p-value > 0.05
data_final_binary <- binary_data[ , !(names(binary_data) %in% Remove_vars)]
#Removal of redundant variables real and ordinal data
#Get correlation matrix. Don't forget to ignore categorical variables in this process
cormat<-round(cor(real_data),2)
################### AUXILIARY FUNCTIONS ##########################
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
##################################################################
upper_tri <- get_upper_tri(cormat)
#Remove one variable of pair with high correlation.
related_index = c()
for (line in 1:dim(upper_tri)[1]){
for (col in 1:line){
i = col+dim(upper_tri)[1]*(line-1)
if (abs(upper_tri[i])>0.8 & abs(upper_tri[i])<1){
related_index<-c(related_index, line)
}
}
}
data_final_real<-real_data[-related_index]
#Merge, y variable is V122
final_data <- cbind(data_final_binary,data_final_real)
#Dependent variable
final_data$V122
colnames(final_data)[1]
EDA_dataset <- data_na[, colnames(final_data)]
summary(EDA_dataset)
Dependent_var <- table(data_na$V122)
barplot(Dependent_var, main="Myocarditis",
xlab="No")
#Grouped bar plots for categorical data
#dat <- data.frame(table(binary_data$V3,binary_data$V122))
#names(dat) <- c("independent", "dependent", "count")
#ggplot(data=dat) + geom_bar(stat="indentity")
#ggplot(data=dat, aes(x=binary_data$V3, y=dat$Freq, fill=binary_data$V122)) + geom_bar(stat="indentity")
#ggplot(data=dat, aes(x=Fruit, y=Count, fill=Bug)) + geom_bar(stat="identity")
# Grouped Bar Plot
#data_na$V3
#counts <- table(data_na$V122, data_na$V3)
#barplot(counts, main="Car Distribution by Gears and VS",
#        xlab="Number of Gears", col=c("darkblue","red"),
#        legend = rownames(counts), beside=TRUE)
#Fruit <- c(rep("Apple",3),rep("Orange",5))
#Bug <- c("worm","spider","spider","worm","worm","worm","worm","spider")
#df <- data.frame(Fruit,Bug)
#dat <- data.frame(table(df$Fruit,df$Bug))
#ames(dat) <- c("Fruit","Bug","Count")
#ggplot(data=dat, aes(x=Fruit, y=Count, fill=Bug)) + geom_bar(stat="identity")
#colnames(data_final_binary)
#test
#x <- length(binary_data)
#for(i in x){
#  df <- data.frame(binary_data[binary_data[, x], binary_data$V122)
#  dat <- data.frame(table(df$binary_data.))
#}
#binary_data[]
#Stacked bar plots of binary data
pdf(file="Stacked_bar_plots.pdf")
par(mfrow= c(3,3))
#V3
df <- data.frame(binary_data$V3, binary_data$V122)
data.frame(table(binary_data$v3, binary_data$v122))
dat <- data.frame(table(df$binary_data.V3,df$binary_data.V122))
names(dat) <- c("V3", "V122", "Count")
p1 <- ggplot(data=dat, aes(x=V3, y=Count, fill=V122)) + geom_bar(stat="identity")
#V20
df <- data.frame(binary_data$V20, binary_data$V122)
data.frame(table(binary_data$v20, binary_data$v122))
dat <- data.frame(table(df$binary_data.V20,df$binary_data.V122))
names(dat) <- c("V20", "V122", "Count")
p2 <- ggplot(data=dat, aes(x=V20, y=Count, fill=V122)) + geom_bar(stat="identity")
#V27
df <- data.frame(binary_data$V27, binary_data$V122)
data.frame(table(binary_data$v27, binary_data$v122))
dat <- data.frame(table(df$binary_data.V27,df$binary_data.V122))
names(dat) <- c("V27", "V122", "Count")
p3 <- ggplot(data=dat, aes(x=V27, y=Count, fill=V122)) + geom_bar(stat="identity")
#V30
df <- data.frame(binary_data$V30, binary_data$V122)
data.frame(table(binary_data$v30, binary_data$v122))
dat <- data.frame(table(df$binary_data.V30,df$binary_data.V122))
names(dat) <- c("V30", "V122", "Count")
p4 <- ggplot(data=dat, aes(x=V30, y=Count, fill=V122)) + geom_bar(stat="identity")
#V31
df <- data.frame(binary_data$V31, binary_data$V122)
data.frame(table(binary_data$v31, binary_data$v122))
dat <- data.frame(table(df$binary_data.V31,df$binary_data.V122))
names(dat) <- c("V31", "V122", "Count")
p5 <- ggplot(data=dat, aes(x=V31, y=Count, fill=V122)) + geom_bar(stat="identity")
#V43
df <- data.frame(binary_data$V43, binary_data$V122)
data.frame(table(binary_data$v43, binary_data$v122))
dat <- data.frame(table(df$binary_data.V43,df$binary_data.V122))
names(dat) <- c("V43", "V122", "Count")
p6 <- ggplot(data=dat, aes(x=V43, y=Count, fill=V122)) + geom_bar(stat="identity")
#V54
df <- data.frame(binary_data$V54, binary_data$V122)
data.frame(table(binary_data$v54, binary_data$v122))
dat <- data.frame(table(df$binary_data.V54,df$binary_data.V122))
names(dat) <- c("V54", "V122", "Count")
p7 <- ggplot(data=dat, aes(x=V54, y=Count, fill=V122)) + geom_bar(stat="identity")
#V99
df <- data.frame(binary_data$V99, binary_data$V122)
data.frame(table(binary_data$v99, binary_data$v122))
dat <- data.frame(table(df$binary_data.V99,df$binary_data.V122))
names(dat) <- c("V99", "V122", "Count")
p8 <- ggplot(data=dat, aes(x=V99, y=Count, fill=V122)) + geom_bar(stat="identity")
#V109
df <- data.frame(binary_data$V109, binary_data$V122)
data.frame(table(binary_data$v109, binary_data$v122))
dat <- data.frame(table(df$binary_data.V109,df$binary_data.V122))
names(dat) <- c("V109", "V122", "Count")
p9 <- ggplot(data=dat, aes(x=V109, y=Count, fill=V122)) + geom_bar(stat="identity")
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9)
