##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
# COMENTÁRIOS
##############
# READS DATA #
##############
mydata = read.table('/Users/thomasgaehtgens/BIBLIOTECA/MMA/ESTATÍSTICA COMPUTACIONAL/LABS/LAB 1/Dataset/LabClasses_data1.txt')
######################################################################
# Reading data. Which is data dimension? List their first six lines? #
######################################################################
str(mydata)
head(mydata, 6)
#########################################################
# Change variable name V1 to ID. Change variable value. #
#########################################################
colnames(mydata) #prints names
names(mydata)[names(mydata) == "V1"] <- "ID"
#or
names(mydata)[1] <- "ID"
######################################################################
# Variable V9 is coded 1, 2, 3 or 4. Can V9 be considered as factor? #
######################################################################
# What is a factor in R? it's a categorical variable
##################################
# Obtain descriptive statistics. #
##################################
max(mydata$ID)
min(mydata$ID)
descr(mydata$ID)
license()
# Install Dependencies
install.packages(“FactoMineR”)
# Install Dependencies
install.packages("FactoMineR")
install.packages("devtools")
library(devtools)
setwd("~/BIBLIOTECA/MÉTODOS ESTATÍSTICOS DE DATA MINING/Github/SMDM")
install.packages("devtools")
library(devtools)
library("devtools")
install.packages("devtools")
library("devtools")
install.packages("devtools", dependencies = TRUE)
library("devtools")
# Install Dependencies
install.packages("fpc")
install.packages("dbscan")
library("dbscan")
library("dbscan")
library("fpc")
# Get preprocessed data
data <- readRDS("datasets/preprocessed.RDS")
# Compute DBSCAN using fpc package
set.seed(1)
db <- fpc::dbscan(data1, eps = 0.15, MinPts = 5)
db <- fpc::dbscan(data, eps = 0.15, MinPts = 5)
# Plot DBSCAN results
fviz_cluster(db, data1, stand = FALSE, ellipse = FALSE, geom = "point")
library(factoextra)
install.packages("factoextra")
library("factoextra")
# Knee Point Method
dbscan::kNNdistplot(data, k =  40)
abline(h = 1.7, lty = 2)
abline(h = 1.8, lty = 2)
abline(h = 2, lty = 2)
abline(h = 1.9, lty = 2)
# Knee Point Method
dbscan::kNNdistplot(data, k =  40)
abline(h = 1.9, lty = 2)
abline(h = 1.95, lty = 2)
# Knee Point Method
dbscan::kNNdistplot(data, k =  40)
abline(h = 1.95, lty = 2)
# Compute DBSCAN using fpc package
set.seed(1)
db <- fpc::dbscan(data, eps = 1.95, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data1, stand = FALSE, ellipse = FALSE, geom = "point")
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
# Knee Point Method
dbscan::kNNdistplot(data, k =  5)
abline(h = 1.95, lty = 2)
# Knee Point Method
dbscan::kNNdistplot(data, k =  10)
abline(h = 1.8, lty = 2)
db <- fpc::dbscan(data, eps = 1.8, MinPts = 10)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db.cluster)
hist(db$cluster)
# Knee Point Method
dbscan::kNNdistplot(data, k = 5)
abline(h = 1.8, lty = 2)
db <- fpc::dbscan(data, eps = 1.8, MinPts = 5)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
# Knee Point Method
dbscan::kNNdistplot(data, k = 1)
abline(h = 1.8, lty = 2)
abline(h = 1.5, lty = 2)
db <- fpc::dbscan(data, eps = 1.5, MinPts = 1)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
# Knee Point Method
dbscan::kNNdistplot(data, k = 2)
abline(h = 1.5, lty = 2)
# Knee Point Method
dbscan::kNNdistplot(data, k = 2)
abline(h = 1.5, lty = 2)
abline(h = 1.6, lty = 2)
db <- fpc::dbscan(data, eps = 1.6, MinPts = 1)
db <- fpc::dbscan(data, eps = 1.6, MinPts = 2)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
db <- fpc::dbscan(data, eps = 1.5, MinPts = 2)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
# Knee Point Method
dbscan::kNNdistplot(data, k = 20)
abline(h = 1.6, lty = 2)
# Compute DBSCAN using fpc package
set.seed(1)
db <- fpc::dbscan(data, eps = 1.5, MinPts = 20)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
# Knee Point Method
dbscan::kNNdistplot(data, k = 40)
abline(h = 1.6, lty = 2)
abline(h = 1.7, lty = 2)
db <- fpc::dbscan(data, eps = 1.5, MinPts = 40)
db <- fpc::dbscan(data, eps = 1.7, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
# Knee Point Method
dbscan::kNNdistplot(data, k = 40)
abline(h = 1.75 lty = 2)
abline(h = 1.75 lty = 2)
abline(h = 1.75, lty = 2)
# Compute DBSCAN using fpc package
set.seed(1)
db <- fpc::dbscan(data, eps = 1.7, MinPts = 40)
db <- fpc::dbscan(data, eps = 1.75, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
db <- fpc::dbscan(data, eps = 1.6, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
# Knee Point Method
dbscan::kNNdistplot(data, k = 40)
abline(h = 1.6, lty = 2)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
# Knee Point Method
dbscan::kNNdistplot(data, k = 40)
abline(h = 1.6, lty = 2)
abline(h = 1.9, lty = 2)
abline(h = 1.95, lty = 2)
abline(h = 2, lty = 2)
# Knee Point Method
dbscan::kNNdistplot(data, k = 40)
abline(h = 2, lty = 2)
# Knee Point Method
pdf("Knee_Point_DBSCAN.pdf")
dbscan::kNNdistplot(data, k = 40)
abline(h = 2, lty = 2)
dev.off()
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
hist(db$cluster)
library(ggplot2)
library("ggplot2")
hist(db$cluster)
histogram=hist(db$cluster)
ggplot(data, aes(x = c('Noise', 'Cluster 1'), y = c(107, 1593))) +
geom_col()
ggplot(data, aes(x = c('Noise', 'Cluster 1'), y = c(107, 1593))) +
geom_col()
ggplot(data, aes(x = c(0, 1), y = c(107, 1593))) +
geom_col()
ggplot(data, aes(x = cluster, y = cluser)) +
geom_col()
ggplot(data, aes(x = cluster, y = cluster)) +
geom_col()
ggplot(db, aes(x = cluster, y = cluster)) +
geom_col()
hist(db$Cluster)
hist(db$cluster)
ggplot(db, aes(cluster)) +
geom_histogram(bins = 2)
ggplot(db, aes(cluster)) +
geom_histogram(bins = 2)
hist(db$cluster)
histogram=hist(db$cluster)
barplot(db$cluster)
barplot(db.cluster)
barplot(db$cluster)
hist(db$cluster)
histogram=hist(db$cluster)
barplot(c(107, 1593))
barplot(c(107, 1593), col = c("black", "salmon"))
barplot(c(107, 1593),
col=c("black", "salmon"),
name.arg=('Noise', 'Cluster 1'))
barplot(c(107, 1593),
col=c("black", "salmon"),
name.arg=('Noise', 'Cluster 1'))
barplot(c(107, 1593),
col=c("black", "salmon"),
name.arg=("Noise", "Cluster 1"))
barplot(c(107, 1593),
col=c("black", "salmon"),
name.arg=c("Noise", "Cluster 1"))
barplot(c(107, 1593),
col=c("black", "salmon"),
name.arg=c("Noise", "Cluster 1"))
barplot(height=c(107, 1593),
col=c("black", "salmon"),
name.arg=c("Noise", "Cluster 1"))
barplot(height=c(107, 1593),
col=c("black", "salmon"),
names.arg=c("Noise", "Cluster 1"))
barplot(height=c(107, 1593),
col=c("black", "salmon"),
names.arg=c("Noise", "Cluster 1")
border="white")
barplot(height=c(107, 1593),
col=c("black", "salmon"),
names.arg=c("Noise", "Cluster 1"),
border="white")
barplot(height=c(107, 1593),
col=c("black", "salmon"),
names.arg=c("Noise", "Cluster 1"),
border="white",
xlab="Clusters",
ylab="Members")
barplot(height=c(107, 1593),
col=c("black", "salmon"),
names.arg=c("Noise", "Cluster 1"),
border="white",
xlab="Frequency",
ylab="Members")
install.packages("cluster")
install.packages("cluster")
#Number of Clusters vs. the Total Within Sum of Squares
fviz_nbclust(data, kmeans, method = "wss")
library("fpc")
library("dbscan")
library("factoextra")
library("cluster")
library("ggplot2")
# Set seed for reproducibility
set.seed(1)
# Get preprocessed data
data <- readRDS("datasets/preprocessed.RDS")
#Number of Clusters vs. the Total Within Sum of Squares
fviz_nbclust(data, kmeans, method = "wss")
#perform k-means clustering with k = 3 clusters
km <- kmeans(data, centers = 3, nstart = 25)
#view results
km
#plot results of final k-means model
fviz_cluster(km, data = data)
#find means of each cluster
aggregate(data, by=list(cluster=km$cluster), mean)
final_data <- cbind(data, cluster = km$cluster)
fviz_nbclust(data, pam, method = "wss")
#perform k-medoids clustering with k = 7 clusters
kmed <- pam(data, k = 7)
#view results
kmed
#plot results of final k-medoids model
fviz_cluster(kmed, data = data2)
# Knee Point Method
pdf("Knee_Point_DBSCAN.pdf")
dbscan::kNNdistplot(data, k = 40)
abline(h = 2, lty = 2)
dev.off()
dbscan::kNNdistplot(data, k = 40)
# Compute DBSCAN using fpc package
db <- fpc::dbscan(data, eps = 2, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
histogram=hist(db$cluster)
barplot(height=c(107, 1593),
col=c("black", "salmon"),
names.arg=c("Noise", "Cluster 1"),
border="white",
xlab="Frequency",
ylab="Members")
# Set seed for reproducibility
set.seed(1)
dbscan::kNNdistplot(data, k = 40)
abline(h = 2, lty = 2)
# Compute DBSCAN using fpc package
db <- fpc::dbscan(data, eps = 2, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
# Get preprocessed data
data <- readRDS("datasets/preprocessed.RDS")
# Compute DBSCAN using fpc package
db <- fpc::dbscan(data, eps = 2, MinPts = 40)
# Plot DBSCAN results
fviz_cluster(db, data, stand = FALSE, ellipse = FALSE, geom = "point")
histogram=hist(db$cluster)
dbscan::kNNdistplot(data, k = 40)
abline(h = 2, lty = 2)
dev.off()
# Compute DBSCAN using fpc package
db <- fpc::dbscan(data, eps = 2, MinPts = 40)
# Compute DBSCAN using fpc package
db <- fpc::dbscan(data, eps = 2, MinPts = 40)
